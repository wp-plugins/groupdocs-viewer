<?php
/**
 *  Copyright 2012 GroupDocs.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */
class SignatureApi {

	private $basePath = "https://api.groupdocs.com/v2.0";

	function __construct($apiClient) {
	  $this->apiClient = $apiClient;
	}

	public static function newInstance($apiClient) {
	  return new self($apiClient);
	}

    public function setBasePath($basePath) {
	  $this->basePath = $basePath;
	}
	  
	public function getBasePath() {
	  $this->basePath;
	}

  /**
	 * CreateSignatureField
	 * Create signature field
   * userId, string: User GUID (required)
   * body, SignatureFieldSettings: Settings of the new field (optional)
   * @return SignatureFieldResponse
	 */

   public function CreateSignatureField($userId, $body=null) {
      if( $userId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/field");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "POST";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureFieldResponse');
  	  return $responseObject;
      }
  /**
	 * ModifySignatureField
	 * Modify signature field
   * userId, string: User GUID (required)
   * fieldId, string: Field GUID (required)
   * body, SignatureFieldSettings: Settings of the field (optional)
   * @return SignatureFieldResponse
	 */

   public function ModifySignatureField($userId, $fieldId, $body=null) {
      if( $userId === null || $fieldId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/fields/{fieldId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "POST";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($fieldId !== null) {
  			$resourcePath = str_replace("{" . "fieldId" . "}",
  			                            $fieldId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureFieldResponse');
  	  return $responseObject;
      }
  /**
	 * DeleteSignatureField
	 * Delete signature field
   * userId, string: User GUID (required)
   * fieldId, string: Field GUID (required)
   * @return SignatureStatusResponse
	 */

   public function DeleteSignatureField($userId, $fieldId) {
      if( $userId === null || $fieldId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/fields/{fieldId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "DELETE";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($fieldId !== null) {
  			$resourcePath = str_replace("{" . "fieldId" . "}",
  			                            $fieldId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureStatusResponse');
  	  return $responseObject;
      }
  /**
	 * GetContacts
	 * Get contacts
   * userId, string: User GUID (required)
   * page, string: Page number (optional)
   * firstName, string: Filter by firstName (optional)
   * lastName, string: Filter by lastName (optional)
   * email, string: Filter by email (optional)
   * records, string: Records count to be returned (optional)
   * @return SignatureContactsResponse
	 */

   public function GetContacts($userId, $page=null, $firstName=null, $lastName=null, $email=null, $records=null) {
      if( $userId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/contacts?firstName={firstName}&lastName={lastName}&email={email}&records={count}&page={page}");
  	  $pos = strpos($resourcePath, "?");
	  if($pos !== false){
  	  	$resourcePath = substr($resourcePath, 0, $pos);
	  }
	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($page !== null) {
  		  $queryParams['page'] = $this->apiClient->toPathValue($page);
  		}
  		if($firstName !== null) {
  		  $queryParams['firstName'] = $this->apiClient->toPathValue($firstName);
  		}
  		if($lastName !== null) {
  		  $queryParams['lastName'] = $this->apiClient->toPathValue($lastName);
  		}
  		if($email !== null) {
  		  $queryParams['email'] = $this->apiClient->toPathValue($email);
  		}
  		if($records !== null) {
  		  $queryParams['records'] = $this->apiClient->toPathValue($records);
  		}
  		if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureContactsResponse');
  	  return $responseObject;
      }
  /**
	 * AddContact
	 * Add contact
   * userId, string: User GUID (required)
   * body, SignatureContactSettings: Contact data (required)
   * @return SignatureContactResponse
	 */

   public function AddContact($userId, $body) {
      if( $userId === null || $body === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/contact");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "POST";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureContactResponse');
  	  return $responseObject;
      }
  /**
	 * ModifyContact
	 * Update contact
   * userId, string: User GUID (required)
   * contactId, string: Contact GUID (required)
   * body, SignatureContactSettings: Contact data (optional)
   * @return SignatureContactResponse
	 */

   public function ModifyContact($userId, $contactId, $body=null) {
      if( $userId === null || $contactId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/contacts/{contactId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "POST";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($contactId !== null) {
  			$resourcePath = str_replace("{" . "contactId" . "}",
  			                            $contactId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureContactResponse');
  	  return $responseObject;
      }
  /**
	 * DeleteContact
	 * Delete contact
   * userId, string: User GUID (required)
   * contactId, string: Contact GUID (required)
   * @return SignatureContactResponse
	 */

   public function DeleteContact($userId, $contactId) {
      if( $userId === null || $contactId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/contacts/{contactId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "DELETE";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($contactId !== null) {
  			$resourcePath = str_replace("{" . "contactId" . "}",
  			                            $contactId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureContactResponse');
  	  return $responseObject;
      }
  /**
	 * ImportContacts
	 * Import contacts
   * userId, string: User GUID (required)
   * body, List[SignatureContactSettings]: Array of SignatureContactSettings (optional)
   * @return SignatureContactsImportResponse
	 */

   public function ImportContacts($userId, $body=null) {
      if( $userId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/contacts");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "POST";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureContactsImportResponse');
  	  return $responseObject;
      }
  /**
	 * AddContactIntegration
	 * Add Contact Integration Authorization
   * userId, string: User GUID (required)
   * body, string: Authorization settings (optional)
   * @return SignatureStatusResponse
	 */

   public function AddContactIntegration($userId, $body=null) {
      if( $userId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/integration");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "POST";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureStatusResponse');
  	  return $responseObject;
      }
  /**
	 * SignDocument
	 * Sign document
   * userId, string: User GUID (required)
   * body, SignatureSignDocumentSettings: Settings of the signing document (optional)
   * @return SignatureSignDocumentsResponse
	 */

   public function SignDocument($userId, $body=null) {
      if( $userId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/sign");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "POST";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureSignDocumentsResponse');
  	  return $responseObject;
      }
  /**
	 * ArchiveSignatureEnvelope
	 * Archive envelope
   * userId, string: User GUID (required)
   * envelopeId, string: Envelope GUID (required)
   * @return SignatureStatusResponse
	 */

   public function ArchiveSignatureEnvelope($userId, $envelopeId) {
      if( $userId === null || $envelopeId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/envelopes/{envelopeId}/archive");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "PUT";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($envelopeId !== null) {
  			$resourcePath = str_replace("{" . "envelopeId" . "}",
  			                            $envelopeId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureStatusResponse');
  	  return $responseObject;
      }
  /**
	 * GetEnvelopeAuditLogs
	 * Get envelope audit logs
   * userId, string: User GUID (required)
   * envelopeId, string: Envelope GUID (required)
   * @return SignatureEnvelopeAuditLogsResponse
	 */

   public function GetEnvelopeAuditLogs($userId, $envelopeId) {
      if( $userId === null || $envelopeId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/envelopes/{envelopeId}/logs");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($envelopeId !== null) {
  			$resourcePath = str_replace("{" . "envelopeId" . "}",
  			                            $envelopeId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureEnvelopeAuditLogsResponse');
  	  return $responseObject;
      }
  /**
	 * CreateSignatureEnvelope
	 * Create signature envelope
   * userId, string: User GUID (required)
   * name, string: Envelope name (optional)
   * body, SignatureEnvelopeSettings: Settings of the new envelope (optional)
   * templateGuid, string: A templateGuid of the template which will be used to created the new envelope (optional)
   * envelopeGuid, int: A envelopeGuid of the envelope which will be used to created the new envelope (optional)
   * documentGuid, int: A documentGuid of the document which will be added to the new created envelope (optional)
   * @return SignatureEnvelopeResponse
	 */

   public function CreateSignatureEnvelope($userId, $name=null, $body=null, $templateGuid=null, $envelopeGuid=null, $documentGuid=null) {
      if( $userId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/envelope?name={name}&templateId={templateId}&envelopeId={envelopeId}&documentId={documentId}");
  	  $pos = strpos($resourcePath, "?");
	  if($pos !== false){
  	  	$resourcePath = substr($resourcePath, 0, $pos);
	  }
	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "POST";
      $queryParams = array();
      $headerParams = array();

      if($name !== null) {
  		  $queryParams['name'] = $this->apiClient->toPathValue($name);
  		}
  		if($templateGuid !== null) {
  		  $queryParams['templateGuid'] = $this->apiClient->toPathValue($templateGuid);
  		}
  		if($envelopeGuid !== null) {
  		  $queryParams['envelopeGuid'] = $this->apiClient->toPathValue($envelopeGuid);
  		}
  		if($documentGuid !== null) {
  		  $queryParams['documentGuid'] = $this->apiClient->toPathValue($documentGuid);
  		}
  		if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureEnvelopeResponse');
  	  return $responseObject;
      }
  /**
	 * DeclineEnvelope
	 * Decline envelope
   * userId, string: User GUID (required)
   * envelopeId, string: Envelope GUID (required)
   * recipientId, string: Recipient GUID (required)
   * @return SignatureStatusResponse
	 */

   public function DeclineEnvelope($userId, $envelopeId, $recipientId) {
      if( $userId === null || $envelopeId === null || $recipientId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/envelopes/{envelopeId}/recipient/{recipientId}/decline");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "PUT";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($envelopeId !== null) {
  			$resourcePath = str_replace("{" . "envelopeId" . "}",
  			                            $envelopeId, $resourcePath);
  		}
  		if($recipientId !== null) {
  			$resourcePath = str_replace("{" . "recipientId" . "}",
  			                            $recipientId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureStatusResponse');
  	  return $responseObject;
      }
  /**
	 * DelegateEnvelopeRecipient
	 * Delegate envelope recipient
   * userId, string: User GUID (required)
   * envelopeId, string: Envelope GUID (required)
   * recipientId, string: Recipient GUID (required)
   * recipientEmail, string: Delegated recipient email (required)
   * recipientFirstName, string: Delegated recipient first name (required)
   * recipientLastName, string: Delegated recipient last name (required)
   * @return SignatureStatusResponse
	 */

   public function DelegateEnvelopeRecipient($userId, $envelopeId, $recipientId, $recipientEmail, $recipientFirstName, $recipientLastName) {
      if( $userId === null || $envelopeId === null || $recipientId === null || $recipientEmail === null || $recipientFirstName === null || $recipientLastName === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/envelopes/{envelopeId}/recipient/{recipientId}/delegate?email={recipientEmail}&firstname={recipientFirstName}&lastname={recipientLastName}");
  	  $pos = strpos($resourcePath, "?");
	  if($pos !== false){
  	  	$resourcePath = substr($resourcePath, 0, $pos);
	  }
	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "POST";
      $queryParams = array();
      $headerParams = array();

      if($recipientEmail !== null) {
  		  $queryParams['email'] = $this->apiClient->toPathValue($recipientEmail);
  		}
  		if($recipientFirstName !== null) {
  		  $queryParams['firstname'] = $this->apiClient->toPathValue($recipientFirstName);
  		}
  		if($recipientLastName !== null) {
  		  $queryParams['lastname'] = $this->apiClient->toPathValue($recipientLastName);
  		}
  		if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($envelopeId !== null) {
  			$resourcePath = str_replace("{" . "envelopeId" . "}",
  			                            $envelopeId, $resourcePath);
  		}
  		if($recipientId !== null) {
  			$resourcePath = str_replace("{" . "recipientId" . "}",
  			                            $recipientId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureStatusResponse');
  	  return $responseObject;
      }
  /**
	 * DeleteSignatureEnvelope
	 * Delete signature envelope
   * userId, string: User GUID (required)
   * envelopeId, string: Envelope GUID (required)
   * @return SignatureStatusResponse
	 */

   public function DeleteSignatureEnvelope($userId, $envelopeId) {
      if( $userId === null || $envelopeId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/envelopes/{envelopeId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "DELETE";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($envelopeId !== null) {
  			$resourcePath = str_replace("{" . "envelopeId" . "}",
  			                            $envelopeId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureStatusResponse');
  	  return $responseObject;
      }
  /**
	 * AddSignatureEnvelopeDocument
	 * Add document in envelope
   * userId, string: User GUID (required)
   * envelopeId, string: Envelope GUID (required)
   * documentId, string: Document GUID (required)
   * order, int: Document order (optional)
   * @return SignatureEnvelopeDocumentResponse
	 */

   public function AddSignatureEnvelopeDocument($userId, $envelopeId, $documentId, $order=null) {
      if( $userId === null || $envelopeId === null || $documentId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/envelopes/{envelopeId}/document/{documentId}?order={order}");
  	  $pos = strpos($resourcePath, "?");
	  if($pos !== false){
  	  	$resourcePath = substr($resourcePath, 0, $pos);
	  }
	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "POST";
      $queryParams = array();
      $headerParams = array();

      if($order !== null) {
  		  $queryParams['order'] = $this->apiClient->toPathValue($order);
  		}
  		if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($envelopeId !== null) {
  			$resourcePath = str_replace("{" . "envelopeId" . "}",
  			                            $envelopeId, $resourcePath);
  		}
  		if($documentId !== null) {
  			$resourcePath = str_replace("{" . "documentId" . "}",
  			                            $documentId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureEnvelopeDocumentResponse');
  	  return $responseObject;
      }
  /**
	 * GetSignedEnvelopeDocument
	 * Get signed envelope document
   * userId, string: User GUID (required)
   * envelopeId, string: Envelope GUID (required)
   * documentId, string: Document GUID (required)
   * @return stream
	 */

   public function GetSignedEnvelopeDocument($userId, $envelopeId, $documentId, FileStream $outFileStream) {
      if( $userId === null || $envelopeId === null || $documentId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/envelopes/{envelopeId}/document/{documentId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($envelopeId !== null) {
  			$resourcePath = str_replace("{" . "envelopeId" . "}",
  			                            $envelopeId, $resourcePath);
  		}
  		if($documentId !== null) {
  			$resourcePath = str_replace("{" . "documentId" . "}",
  			                            $documentId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      return $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams, $outFileStream);
      }
  /**
	 * DeleteSignatureEnvelopeDocument
	 * Delete document from envelope
   * userId, string: User GUID (required)
   * envelopeId, string: Envelope GUID (required)
   * documentId, string: Document GUID (required)
   * @return SignatureStatusResponse
	 */

   public function DeleteSignatureEnvelopeDocument($userId, $envelopeId, $documentId) {
      if( $userId === null || $envelopeId === null || $documentId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/envelopes/{envelopeId}/documents/{documentId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "DELETE";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($envelopeId !== null) {
  			$resourcePath = str_replace("{" . "envelopeId" . "}",
  			                            $envelopeId, $resourcePath);
  		}
  		if($documentId !== null) {
  			$resourcePath = str_replace("{" . "documentId" . "}",
  			                            $documentId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureStatusResponse');
  	  return $responseObject;
      }
  /**
	 * GetSignatureEnvelopeDocuments
	 * Get documents in envelope
   * userId, string: User GUID (required)
   * envelopeId, string: Envelope GUID (required)
   * @return SignatureEnvelopeDocumentsResponse
	 */

   public function GetSignatureEnvelopeDocuments($userId, $envelopeId) {
      if( $userId === null || $envelopeId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/envelopes/{envelopeId}/documents");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($envelopeId !== null) {
  			$resourcePath = str_replace("{" . "envelopeId" . "}",
  			                            $envelopeId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureEnvelopeDocumentsResponse');
  	  return $responseObject;
      }
  /**
	 * GetSignedEnvelopeDocuments
	 * Get signed envelope documents
   * userId, string: User GUID (required)
   * envelopeId, string: Envelope GUID (required)
   * @return stream
	 */

   public function GetSignedEnvelopeDocuments($userId, $envelopeId, FileStream $outFileStream) {
      if( $userId === null || $envelopeId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/envelopes/{envelopeId}/documents/get");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($envelopeId !== null) {
  			$resourcePath = str_replace("{" . "envelopeId" . "}",
  			                            $envelopeId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      return $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams, $outFileStream);
      }
  /**
	 * AddSignatureEnvelopeField
	 * Add signature field for document in envelope
   * userId, string: User GUID (required)
   * envelopeId, string: Envelope GUID (required)
   * documentId, string: Document GUID (required)
   * recipientId, string: Recipient GUID (required)
   * fieldId, string: Field GUID (required)
   * body, SignatureEnvelopeFieldSettings: Settings of the field (optional)
   * @return SignatureEnvelopeFieldsResponse
	 */

   public function AddSignatureEnvelopeField($userId, $envelopeId, $documentId, $recipientId, $fieldId, $body=null) {
      if( $userId === null || $envelopeId === null || $documentId === null || $recipientId === null || $fieldId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/envelopes/{envelopeId}/documents/{documentId}/recipient/{recipientId}/field/{fieldId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "POST";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($envelopeId !== null) {
  			$resourcePath = str_replace("{" . "envelopeId" . "}",
  			                            $envelopeId, $resourcePath);
  		}
  		if($documentId !== null) {
  			$resourcePath = str_replace("{" . "documentId" . "}",
  			                            $documentId, $resourcePath);
  		}
  		if($recipientId !== null) {
  			$resourcePath = str_replace("{" . "recipientId" . "}",
  			                            $recipientId, $resourcePath);
  		}
  		if($fieldId !== null) {
  			$resourcePath = str_replace("{" . "fieldId" . "}",
  			                            $fieldId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureEnvelopeFieldsResponse');
  	  return $responseObject;
      }
  /**
	 * AssignSignatureEnvelopeField
	 * Assign signature envelope field
   * userId, string: User GUID (required)
   * envelopeId, string: Envelope GUID (required)
   * documentId, string: Document GUID (required)
   * fieldId, string: Field GUID (required)
   * body, SignatureEnvelopeAssignFieldSettings: Settings of the field (optional)
   * @return SignatureEnvelopeFieldResponse
	 */

   public function AssignSignatureEnvelopeField($userId, $envelopeId, $documentId, $fieldId, $body=null) {
      if( $userId === null || $envelopeId === null || $documentId === null || $fieldId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/envelopes/{envelopeId}/documents/{documentId}/field/{fieldId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "POST";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($envelopeId !== null) {
  			$resourcePath = str_replace("{" . "envelopeId" . "}",
  			                            $envelopeId, $resourcePath);
  		}
  		if($documentId !== null) {
  			$resourcePath = str_replace("{" . "documentId" . "}",
  			                            $documentId, $resourcePath);
  		}
  		if($fieldId !== null) {
  			$resourcePath = str_replace("{" . "fieldId" . "}",
  			                            $fieldId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureEnvelopeFieldResponse');
  	  return $responseObject;
      }
  /**
	 * FillEnvelopeField
	 * Fill envelope field
   * userId, string: User GUID (required)
   * envelopeId, string: Envelope GUID (required)
   * documentId, string: Document GUID (required)
   * recipientId, string: Recipient GUID (required)
   * fieldId, string: Field GUID (required)
   * signatureId, string: SignatureId GUID (optional)
   * body, stream: Data to be placed in field (optional)
   * @return SignatureEnvelopeFieldResponse
	 */

   public function FillEnvelopeField($userId, $envelopeId, $documentId, $recipientId, $fieldId, $signatureId=null, $body=null) {
      if( $userId === null || $envelopeId === null || $documentId === null || $recipientId === null || $fieldId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/envelopes/{envelopeId}/documents/{documentId}/recipient/{recipientId}/field/{fieldId}?signatureId={signatureId}");
  	  $pos = strpos($resourcePath, "?");
	  if($pos !== false){
  	  	$resourcePath = substr($resourcePath, 0, $pos);
	  }
	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "PUT";
      $queryParams = array();
      $headerParams = array();

      if($signatureId !== null) {
  		  $queryParams['signatureId'] = $this->apiClient->toPathValue($signatureId);
  		}
  		if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($envelopeId !== null) {
  			$resourcePath = str_replace("{" . "envelopeId" . "}",
  			                            $envelopeId, $resourcePath);
  		}
  		if($documentId !== null) {
  			$resourcePath = str_replace("{" . "documentId" . "}",
  			                            $documentId, $resourcePath);
  		}
  		if($recipientId !== null) {
  			$resourcePath = str_replace("{" . "recipientId" . "}",
  			                            $recipientId, $resourcePath);
  		}
  		if($fieldId !== null) {
  			$resourcePath = str_replace("{" . "fieldId" . "}",
  			                            $fieldId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureEnvelopeFieldResponse');
  	  return $responseObject;
      }
  /**
	 * ModifySignatureEnvelopeFieldLocation
	 * Modify signature envelope field location
   * userId, string: User GUID (required)
   * envelopeId, string: Envelope GUID (required)
   * documentId, string: Document GUID (required)
   * recipientId, string: Recipient GUID (required)
   * fieldId, string: Field GUID (required)
   * locationId, string: Field location GUID (required)
   * body, SignatureEnvelopeFieldLocationSettings: Settings of the field location (optional)
   * @return SignatureEnvelopeFieldResponse
	 */

   public function ModifySignatureEnvelopeFieldLocation($userId, $envelopeId, $documentId, $recipientId, $fieldId, $locationId, $body=null) {
      if( $userId === null || $envelopeId === null || $documentId === null || $recipientId === null || $fieldId === null || $locationId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/envelopes/{envelopeId}/documents/{documentId}/recipient/{recipientId}/fields/{fieldId}/locations/{locationId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "PUT";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($envelopeId !== null) {
  			$resourcePath = str_replace("{" . "envelopeId" . "}",
  			                            $envelopeId, $resourcePath);
  		}
  		if($documentId !== null) {
  			$resourcePath = str_replace("{" . "documentId" . "}",
  			                            $documentId, $resourcePath);
  		}
  		if($recipientId !== null) {
  			$resourcePath = str_replace("{" . "recipientId" . "}",
  			                            $recipientId, $resourcePath);
  		}
  		if($fieldId !== null) {
  			$resourcePath = str_replace("{" . "fieldId" . "}",
  			                            $fieldId, $resourcePath);
  		}
  		if($locationId !== null) {
  			$resourcePath = str_replace("{" . "locationId" . "}",
  			                            $locationId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureEnvelopeFieldResponse');
  	  return $responseObject;
      }
  /**
	 * DeleteSignatureEnvelopeFieldLocation
	 * Remove signature envelope field location
   * userId, string: User GUID (required)
   * envelopeId, string: Envelope GUID (required)
   * fieldId, string: Field GUID (required)
   * locationId, string: Field location GUID (required)
   * @return SignatureStatusResponse
	 */

   public function DeleteSignatureEnvelopeFieldLocation($userId, $envelopeId, $fieldId, $locationId) {
      if( $userId === null || $envelopeId === null || $fieldId === null || $locationId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/envelopes/{envelopeId}/fields/{fieldId}/locations/{locationId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "DELETE";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($envelopeId !== null) {
  			$resourcePath = str_replace("{" . "envelopeId" . "}",
  			                            $envelopeId, $resourcePath);
  		}
  		if($fieldId !== null) {
  			$resourcePath = str_replace("{" . "fieldId" . "}",
  			                            $fieldId, $resourcePath);
  		}
  		if($locationId !== null) {
  			$resourcePath = str_replace("{" . "locationId" . "}",
  			                            $locationId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureStatusResponse');
  	  return $responseObject;
      }
  /**
	 * ModifySignatureEnvelopeField
	 * Modify signature envelope field
   * userId, string: User GUID (required)
   * envelopeId, string: Envelope GUID (required)
   * documentId, string: Document GUID (required)
   * fieldId, string: Field GUID (required)
   * body, SignatureEnvelopeFieldSettings: Settings of the field (optional)
   * @return SignatureEnvelopeFieldResponse
	 */

   public function ModifySignatureEnvelopeField($userId, $envelopeId, $documentId, $fieldId, $body=null) {
      if( $userId === null || $envelopeId === null || $documentId === null || $fieldId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/envelopes/{envelopeId}/documents/{documentId}/field/{fieldId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "PUT";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($envelopeId !== null) {
  			$resourcePath = str_replace("{" . "envelopeId" . "}",
  			                            $envelopeId, $resourcePath);
  		}
  		if($documentId !== null) {
  			$resourcePath = str_replace("{" . "documentId" . "}",
  			                            $documentId, $resourcePath);
  		}
  		if($fieldId !== null) {
  			$resourcePath = str_replace("{" . "fieldId" . "}",
  			                            $fieldId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureEnvelopeFieldResponse');
  	  return $responseObject;
      }
  /**
	 * DeleteSignatureEnvelopeField
	 * Delete signature envelope field
   * userId, string: User GUID (required)
   * envelopeId, string: Envelope GUID (required)
   * fieldId, string: Field GUID (required)
   * @return SignatureStatusResponse
	 */

   public function DeleteSignatureEnvelopeField($userId, $envelopeId, $fieldId) {
      if( $userId === null || $envelopeId === null || $fieldId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/envelopes/{envelopeId}/fields/{fieldId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "DELETE";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($envelopeId !== null) {
  			$resourcePath = str_replace("{" . "envelopeId" . "}",
  			                            $envelopeId, $resourcePath);
  		}
  		if($fieldId !== null) {
  			$resourcePath = str_replace("{" . "fieldId" . "}",
  			                            $fieldId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureStatusResponse');
  	  return $responseObject;
      }
  /**
	 * GetSignatureEnvelopeFields
	 * Get signature field for document in envelope per recipient
   * userId, string: User GUID (required)
   * envelopeId, string: Envelope GUID (required)
   * documentId, string: Document GUID (optional)
   * recipientId, string: Recipient GUID (optional)
   * @return SignatureEnvelopeFieldsResponse
	 */

   public function GetSignatureEnvelopeFields($userId, $envelopeId, $documentId=null, $recipientId=null) {
      if( $userId === null || $envelopeId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/envelopes/{envelopeId}/fields?document={documentId}&recipient={recipientId}");
  	  $pos = strpos($resourcePath, "?");
	  if($pos !== false){
  	  	$resourcePath = substr($resourcePath, 0, $pos);
	  }
	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($documentId !== null) {
  		  $queryParams['document'] = $this->apiClient->toPathValue($documentId);
  		}
  		if($recipientId !== null) {
  		  $queryParams['recipient'] = $this->apiClient->toPathValue($recipientId);
  		}
  		if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($envelopeId !== null) {
  			$resourcePath = str_replace("{" . "envelopeId" . "}",
  			                            $envelopeId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureEnvelopeFieldsResponse');
  	  return $responseObject;
      }
  /**
	 * GetSignatureEnvelope
	 * Get signature envelope
   * userId, string: User GUID (required)
   * envelopeId, string: Envelope GUID (required)
   * @return SignatureEnvelopeResponse
	 */

   public function GetSignatureEnvelope($userId, $envelopeId) {
      if( $userId === null || $envelopeId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/envelopes/{envelopeId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($envelopeId !== null) {
  			$resourcePath = str_replace("{" . "envelopeId" . "}",
  			                            $envelopeId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureEnvelopeResponse');
  	  return $responseObject;
      }
  /**
	 * ModifySignatureEnvelope
	 * Modify signature envelope
   * userId, string: User GUID (required)
   * envelopeId, string: Envelope GUID (required)
   * body, SignatureEnvelopeSettings: Settings of the envelope (optional)
   * @return SignatureEnvelopeResponse
	 */

   public function ModifySignatureEnvelope($userId, $envelopeId, $body=null) {
      if( $userId === null || $envelopeId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/envelopes/{envelopeId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "POST";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($envelopeId !== null) {
  			$resourcePath = str_replace("{" . "envelopeId" . "}",
  			                            $envelopeId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureEnvelopeResponse');
  	  return $responseObject;
      }
  /**
	 * AddSignatureEnvelopeRecipient
	 * Add signature envelope recipient
   * userId, string: User GUID (required)
   * envelopeId, string: Envelope GUID (required)
   * recipientEmail, string: Recipient email (required)
   * recipientFirstName, string: Recipient first name (required)
   * recipientLastName, string: Recipient last name (required)
   * order, int: Recipient order (optional)
   * role, string: Recipient role id (required)
   * @return SignatureEnvelopeRecipientResponse
	 */

   public function AddSignatureEnvelopeRecipient($userId, $envelopeId, $recipientEmail, $recipientFirstName, $recipientLastName, $order=null, $role) {
      if( $userId === null || $envelopeId === null || $recipientEmail === null || $recipientFirstName === null || $recipientLastName === null || $role === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/envelopes/{envelopeId}/recipient?email={recipientEmail}&firstname={recipientFirstName}&lastname={recipientLastName}&role={roleId}&order={order}");
  	  $pos = strpos($resourcePath, "?");
	  if($pos !== false){
  	  	$resourcePath = substr($resourcePath, 0, $pos);
	  }
	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "POST";
      $queryParams = array();
      $headerParams = array();

      if($recipientEmail !== null) {
  		  $queryParams['email'] = $this->apiClient->toPathValue($recipientEmail);
  		}
  		if($recipientFirstName !== null) {
  		  $queryParams['firstname'] = $this->apiClient->toPathValue($recipientFirstName);
  		}
  		if($recipientLastName !== null) {
  		  $queryParams['lastname'] = $this->apiClient->toPathValue($recipientLastName);
  		}
  		if($order !== null) {
  		  $queryParams['order'] = $this->apiClient->toPathValue($order);
  		}
  		if($role !== null) {
  		  $queryParams['role'] = $this->apiClient->toPathValue($role);
  		}
  		if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($envelopeId !== null) {
  			$resourcePath = str_replace("{" . "envelopeId" . "}",
  			                            $envelopeId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureEnvelopeRecipientResponse');
  	  return $responseObject;
      }
  /**
	 * ModifySignatureEnvelopeRecipient
	 * Modify signature envelope recipient
   * userId, string: User GUID (required)
   * envelopeId, string: Envelope GUID (required)
   * recipientId, string: Recipient GUID (required)
   * recipientEmail, string: Recipient email (required)
   * recipientFirstName, string: Recipient first name (required)
   * recipientLastName, string: Recipient last name (required)
   * order, int: Recipient order (optional)
   * role, string: Recipient role id (required)
   * @return SignatureEnvelopeRecipientResponse
	 */

   public function ModifySignatureEnvelopeRecipient($userId, $envelopeId, $recipientId, $recipientEmail, $recipientFirstName, $recipientLastName, $order=null, $role) {
      if( $userId === null || $envelopeId === null || $recipientId === null || $recipientEmail === null || $recipientFirstName === null || $recipientLastName === null || $role === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/envelopes/{envelopeId}/recipient/{recipientId}?email={recipientEmail}&firstname={recipientFirstName}&lastname={recipientLastName}&role={roleId}&order={order}");
  	  $pos = strpos($resourcePath, "?");
	  if($pos !== false){
  	  	$resourcePath = substr($resourcePath, 0, $pos);
	  }
	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "PUT";
      $queryParams = array();
      $headerParams = array();

      if($recipientEmail !== null) {
  		  $queryParams['email'] = $this->apiClient->toPathValue($recipientEmail);
  		}
  		if($recipientFirstName !== null) {
  		  $queryParams['firstname'] = $this->apiClient->toPathValue($recipientFirstName);
  		}
  		if($recipientLastName !== null) {
  		  $queryParams['lastname'] = $this->apiClient->toPathValue($recipientLastName);
  		}
  		if($order !== null) {
  		  $queryParams['order'] = $this->apiClient->toPathValue($order);
  		}
  		if($role !== null) {
  		  $queryParams['role'] = $this->apiClient->toPathValue($role);
  		}
  		if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($envelopeId !== null) {
  			$resourcePath = str_replace("{" . "envelopeId" . "}",
  			                            $envelopeId, $resourcePath);
  		}
  		if($recipientId !== null) {
  			$resourcePath = str_replace("{" . "recipientId" . "}",
  			                            $recipientId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureEnvelopeRecipientResponse');
  	  return $responseObject;
      }
  /**
	 * DeleteSignatureEnvelopeRecipient
	 * Delete signature envelope recipient
   * userId, string: User GUID (required)
   * envelopeId, string: Envelope GUID (required)
   * recipientId, string: Recipient GUID (required)
   * @return SignatureStatusResponse
	 */

   public function DeleteSignatureEnvelopeRecipient($userId, $envelopeId, $recipientId) {
      if( $userId === null || $envelopeId === null || $recipientId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/envelopes/{envelopeId}/recipients/{recipientId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "DELETE";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($envelopeId !== null) {
  			$resourcePath = str_replace("{" . "envelopeId" . "}",
  			                            $envelopeId, $resourcePath);
  		}
  		if($recipientId !== null) {
  			$resourcePath = str_replace("{" . "recipientId" . "}",
  			                            $recipientId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureStatusResponse');
  	  return $responseObject;
      }
  /**
	 * GetSignatureEnvelopeRecipients
	 * Get signature envelope recipients
   * userId, string: User GUID (required)
   * envelopeId, string: Envelope GUID (required)
   * @return SignatureEnvelopeRecipientsResponse
	 */

   public function GetSignatureEnvelopeRecipients($userId, $envelopeId) {
      if( $userId === null || $envelopeId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/envelopes/{envelopeId}/recipients");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($envelopeId !== null) {
  			$resourcePath = str_replace("{" . "envelopeId" . "}",
  			                            $envelopeId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureEnvelopeRecipientsResponse');
  	  return $responseObject;
      }
  /**
	 * RenameSignatureEnvelope
	 * Rename signature envelope
   * userId, string: User GUID (required)
   * envelopeId, string: Envelope GUID (required)
   * name, string: New envelope name (required)
   * @return SignatureEnvelopeResponse
	 */

   public function RenameSignatureEnvelope($userId, $envelopeId, $name) {
      if( $userId === null || $envelopeId === null || $name === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/envelopes/{envelopeId}?name={name}");
  	  $pos = strpos($resourcePath, "?");
	  if($pos !== false){
  	  	$resourcePath = substr($resourcePath, 0, $pos);
	  }
	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "PUT";
      $queryParams = array();
      $headerParams = array();

      if($name !== null) {
  		  $queryParams['name'] = $this->apiClient->toPathValue($name);
  		}
  		if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($envelopeId !== null) {
  			$resourcePath = str_replace("{" . "envelopeId" . "}",
  			                            $envelopeId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureEnvelopeResponse');
  	  return $responseObject;
      }
  /**
	 * RestartExpiredSignatureEnvelope
	 * Restart expired envelope
   * userId, string: User GUID (required)
   * envelopeId, string: Envelope GUID (required)
   * @return SignatureStatusResponse
	 */

   public function RestartExpiredSignatureEnvelope($userId, $envelopeId) {
      if( $userId === null || $envelopeId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/envelopes/{envelopeId}/restart");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "PUT";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($envelopeId !== null) {
  			$resourcePath = str_replace("{" . "envelopeId" . "}",
  			                            $envelopeId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureStatusResponse');
  	  return $responseObject;
      }
  /**
	 * SignatureEnvelopeSend
	 * Send envelope
   * userId, string: User GUID (required)
   * envelopeId, string: Envelope GUID (required)
   * body, stream: Webhook Callback Url (required)
   * @return SignatureEnvelopeSendResponse
	 */

   public function SignatureEnvelopeSend($userId, $envelopeId, $body) {
      if( $userId === null || $envelopeId === null || $body === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/envelopes/{envelopeId}/send");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "PUT";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($envelopeId !== null) {
  			$resourcePath = str_replace("{" . "envelopeId" . "}",
  			                            $envelopeId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureEnvelopeSendResponse');
  	  return $responseObject;
      }
  /**
	 * SignEnvelope
	 * Sign envelope
   * userId, string: User GUID (required)
   * envelopeId, string: Envelope GUID (required)
   * recipientId, string: Recipient GUID (required)
   * @return SignatureStatusResponse
	 */

   public function SignEnvelope($userId, $envelopeId, $recipientId) {
      if( $userId === null || $envelopeId === null || $recipientId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/envelopes/{envelopeId}/recipient/{recipientId}/sign");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "PUT";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($envelopeId !== null) {
  			$resourcePath = str_replace("{" . "envelopeId" . "}",
  			                            $envelopeId, $resourcePath);
  		}
  		if($recipientId !== null) {
  			$resourcePath = str_replace("{" . "recipientId" . "}",
  			                            $recipientId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureStatusResponse');
  	  return $responseObject;
      }
  /**
	 * GetSignatureEnvelopes
	 * Get signature envelopes
   * userId, string: User GUID (required)
   * statusId, string: Filter envelopes by statusId (optional)
   * page, int: Show records for page number (optional)
   * DateTime, string: Filter envelopes by date (optional)
   * name, string: Filter envelopes by name (optional)
   * recipient, string: Filter envelopes by recipient email (optional)
   * document, string: Filter envelopes by original document md5 checksum (optional)
   * records, int: Show records count (optional)
   * @return SignatureEnvelopesResponse
	 */

   public function GetSignatureEnvelopes($userId, $statusId=null, $page=null, $DateTime=null, $name=null, $recipient=null, $document=null, $records=null) {
      if( $userId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/envelopes?statusId={statusId}&records={count}&page={page}&document={originalDocumentMD5}&recipient={recipientEmail}&date={date}&name={name}");
  	  $pos = strpos($resourcePath, "?");
	  if($pos !== false){
  	  	$resourcePath = substr($resourcePath, 0, $pos);
	  }
	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($statusId !== null) {
  		  $queryParams['statusId'] = $this->apiClient->toPathValue($statusId);
  		}
  		if($page !== null) {
  		  $queryParams['page'] = $this->apiClient->toPathValue($page);
  		}
  		if($DateTime !== null) {
  		  $queryParams['date'] = $this->apiClient->toPathValue($DateTime);
  		}
  		if($name !== null) {
  		  $queryParams['name'] = $this->apiClient->toPathValue($name);
  		}
  		if($recipient !== null) {
  		  $queryParams['recipient'] = $this->apiClient->toPathValue($recipient);
  		}
  		if($document !== null) {
  		  $queryParams['document'] = $this->apiClient->toPathValue($document);
  		}
  		if($records !== null) {
  		  $queryParams['records'] = $this->apiClient->toPathValue($records);
  		}
  		if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureEnvelopesResponse');
  	  return $responseObject;
      }
  /**
	 * GetSignatureEnvelopeResources
	 * Get envelope recources
   * userId, string: User GUID (required)
   * statusIds, string: Envelope status identifier - comma separated list (optional)
   * @return SignatureEnvelopeResourcesResponse
	 */

   public function GetSignatureEnvelopeResources($userId, $statusIds=null) {
      if( $userId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/envelopes/resources?statusIds={statusIds}");
  	  $pos = strpos($resourcePath, "?");
	  if($pos !== false){
  	  	$resourcePath = substr($resourcePath, 0, $pos);
	  }
	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($statusIds !== null) {
  		  $queryParams['statusIds'] = $this->apiClient->toPathValue($statusIds);
  		}
  		if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureEnvelopeResourcesResponse');
  	  return $responseObject;
      }
  /**
	 * GetRecipientSignatureEnvelopes
	 * Get signature envelopes where the user is recipient
   * userId, string: User GUID (required)
   * statusId, string: Filter envelopes by statusId (optional)
   * page, int: Show records for page number (optional)
   * records, int: Show records count (optional)
   * @return SignatureEnvelopesResponse
	 */

   public function GetRecipientSignatureEnvelopes($userId, $statusId=null, $page=null, $records=null) {
      if( $userId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/envelopes/recipient?statusId={statusId}&records={count}&page={page}");
  	  $pos = strpos($resourcePath, "?");
	  if($pos !== false){
  	  	$resourcePath = substr($resourcePath, 0, $pos);
	  }
	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($statusId !== null) {
  		  $queryParams['statusId'] = $this->apiClient->toPathValue($statusId);
  		}
  		if($page !== null) {
  		  $queryParams['page'] = $this->apiClient->toPathValue($page);
  		}
  		if($records !== null) {
  		  $queryParams['records'] = $this->apiClient->toPathValue($records);
  		}
  		if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureEnvelopesResponse');
  	  return $responseObject;
      }
  /**
	 * ArchiveSignatureForm
	 * Archive signature form
   * userId, string: User GUID (required)
   * formId, string: Form GUID (required)
   * @return SignatureStatusResponse
	 */

   public function ArchiveSignatureForm($userId, $formId) {
      if( $userId === null || $formId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/forms/{formId}/archive");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "PUT";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($formId !== null) {
  			$resourcePath = str_replace("{" . "formId" . "}",
  			                            $formId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureStatusResponse');
  	  return $responseObject;
      }
  /**
	 * CompleteSignatureForm
	 * Complete signature form
   * userId, string: User GUID (required)
   * formId, string: Form GUID (required)
   * @return SignatureStatusResponse
	 */

   public function CompleteSignatureForm($userId, $formId) {
      if( $userId === null || $formId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/forms/{formId}/complete");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "PUT";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($formId !== null) {
  			$resourcePath = str_replace("{" . "formId" . "}",
  			                            $formId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureStatusResponse');
  	  return $responseObject;
      }
  /**
	 * CreateSignatureForm
	 * Create signature form
   * userId, string: User GUID (required)
   * name, string: Form name (optional)
   * templateId, string: A templateGuid of the template which will be used to created the new form (optional)
   * assemblyId, int: A guid of the assembly which will be used to created the new form (optional)
   * body, SignatureFormSettings: Settings of the new form (optional)
   * @return SignatureFormResponse
	 */

   public function CreateSignatureForm($userId, $name=null, $templateId=null, $assemblyId=null, $body=null) {
      if( $userId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/form?name={name}&templateId={templateId}&assemblyId={assemblyId}");
  	  $pos = strpos($resourcePath, "?");
	  if($pos !== false){
  	  	$resourcePath = substr($resourcePath, 0, $pos);
	  }
	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "POST";
      $queryParams = array();
      $headerParams = array();

      if($name !== null) {
  		  $queryParams['name'] = $this->apiClient->toPathValue($name);
  		}
  		if($templateId !== null) {
  		  $queryParams['templateId'] = $this->apiClient->toPathValue($templateId);
  		}
  		if($assemblyId !== null) {
  		  $queryParams['assemblyId'] = $this->apiClient->toPathValue($assemblyId);
  		}
  		if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureFormResponse');
  	  return $responseObject;
      }
  /**
	 * DeleteSignatureForm
	 * Delete signature form
   * userId, string: User GUID (required)
   * formId, string: Form GUID (required)
   * @return SignatureStatusResponse
	 */

   public function DeleteSignatureForm($userId, $formId) {
      if( $userId === null || $formId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/forms/{formId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "DELETE";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($formId !== null) {
  			$resourcePath = str_replace("{" . "formId" . "}",
  			                            $formId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureStatusResponse');
  	  return $responseObject;
      }
  /**
	 * AddSignatureFormDocument
	 * Add document in form
   * userId, string: User GUID (required)
   * formId, string: Form GUID (required)
   * documentId, string: Document GUID (required)
   * order, int: Document order (optional)
   * @return SignatureFormDocumentResponse
	 */

   public function AddSignatureFormDocument($userId, $formId, $documentId, $order=null) {
      if( $userId === null || $formId === null || $documentId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/forms/{formId}/document/{documentId}?order={order}");
  	  $pos = strpos($resourcePath, "?");
	  if($pos !== false){
  	  	$resourcePath = substr($resourcePath, 0, $pos);
	  }
	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "POST";
      $queryParams = array();
      $headerParams = array();

      if($order !== null) {
  		  $queryParams['order'] = $this->apiClient->toPathValue($order);
  		}
  		if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($formId !== null) {
  			$resourcePath = str_replace("{" . "formId" . "}",
  			                            $formId, $resourcePath);
  		}
  		if($documentId !== null) {
  			$resourcePath = str_replace("{" . "documentId" . "}",
  			                            $documentId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureFormDocumentResponse');
  	  return $responseObject;
      }
  /**
	 * DeleteSignatureFormDocument
	 * Delete document from form
   * userId, string: User GUID (required)
   * formId, string: Form GUID (required)
   * documentId, string: Document GUID (required)
   * @return SignatureStatusResponse
	 */

   public function DeleteSignatureFormDocument($userId, $formId, $documentId) {
      if( $userId === null || $formId === null || $documentId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/forms/{formId}/documents/{documentId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "DELETE";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($formId !== null) {
  			$resourcePath = str_replace("{" . "formId" . "}",
  			                            $formId, $resourcePath);
  		}
  		if($documentId !== null) {
  			$resourcePath = str_replace("{" . "documentId" . "}",
  			                            $documentId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureStatusResponse');
  	  return $responseObject;
      }
  /**
	 * GetSignatureFormDocuments
	 * Get documents in form
   * userId, string: User GUID (required)
   * formId, string: Form GUID (required)
   * @return SignatureFormDocumentsResponse
	 */

   public function GetSignatureFormDocuments($userId, $formId) {
      if( $userId === null || $formId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/forms/{formId}/documents");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($formId !== null) {
  			$resourcePath = str_replace("{" . "formId" . "}",
  			                            $formId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureFormDocumentsResponse');
  	  return $responseObject;
      }
  /**
	 * AddSignatureFormField
	 * Add signature field for document in form
   * userId, string: User GUID (required)
   * formId, string: Form GUID (required)
   * documentId, string: Document GUID (required)
   * fieldId, string: Field GUID (required)
   * body, SignatureFormFieldSettings: Settings of the field (optional)
   * @return SignatureFormFieldResponse
	 */

   public function AddSignatureFormField($userId, $formId, $documentId, $fieldId, $body=null) {
      if( $userId === null || $formId === null || $documentId === null || $fieldId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/forms/{formId}/documents/{documentId}/field/{fieldId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "POST";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($formId !== null) {
  			$resourcePath = str_replace("{" . "formId" . "}",
  			                            $formId, $resourcePath);
  		}
  		if($documentId !== null) {
  			$resourcePath = str_replace("{" . "documentId" . "}",
  			                            $documentId, $resourcePath);
  		}
  		if($fieldId !== null) {
  			$resourcePath = str_replace("{" . "fieldId" . "}",
  			                            $fieldId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureFormFieldResponse');
  	  return $responseObject;
      }
  /**
	 * ModifySignatureFormFieldLocation
	 * Modify signature form field location
   * userId, string: User GUID (required)
   * formId, string: Form GUID (required)
   * documentId, string: Document GUID (required)
   * fieldId, string: Field GUID (required)
   * locationId, string: Field location GUID (required)
   * body, SignatureFormFieldLocationSettings: Settings of the field location (optional)
   * @return SignatureFormFieldResponse
	 */

   public function ModifySignatureFormFieldLocation($userId, $formId, $documentId, $fieldId, $locationId, $body=null) {
      if( $userId === null || $formId === null || $documentId === null || $fieldId === null || $locationId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/forms/{formId}/documents/{documentId}/fields/{fieldId}/locations/{locationId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "PUT";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($formId !== null) {
  			$resourcePath = str_replace("{" . "formId" . "}",
  			                            $formId, $resourcePath);
  		}
  		if($documentId !== null) {
  			$resourcePath = str_replace("{" . "documentId" . "}",
  			                            $documentId, $resourcePath);
  		}
  		if($fieldId !== null) {
  			$resourcePath = str_replace("{" . "fieldId" . "}",
  			                            $fieldId, $resourcePath);
  		}
  		if($locationId !== null) {
  			$resourcePath = str_replace("{" . "locationId" . "}",
  			                            $locationId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureFormFieldResponse');
  	  return $responseObject;
      }
  /**
	 * DeleteSignatureFormFieldLocation
	 * Remove signature form field location
   * userId, string: User GUID (required)
   * formId, string: Form GUID (required)
   * fieldId, string: Field GUID (required)
   * locationId, string: Field location GUID (required)
   * @return SignatureStatusResponse
	 */

   public function DeleteSignatureFormFieldLocation($userId, $formId, $fieldId, $locationId) {
      if( $userId === null || $formId === null || $fieldId === null || $locationId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/forms/{formId}/fields/{fieldId}/locations/{locationId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "DELETE";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($formId !== null) {
  			$resourcePath = str_replace("{" . "formId" . "}",
  			                            $formId, $resourcePath);
  		}
  		if($fieldId !== null) {
  			$resourcePath = str_replace("{" . "fieldId" . "}",
  			                            $fieldId, $resourcePath);
  		}
  		if($locationId !== null) {
  			$resourcePath = str_replace("{" . "locationId" . "}",
  			                            $locationId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureStatusResponse');
  	  return $responseObject;
      }
  /**
	 * ModifySignatureFormField
	 * Modify signature form field
   * userId, string: User GUID (required)
   * formId, string: Form GUID (required)
   * documentId, string: Document GUID (required)
   * fieldId, string: Field GUID (required)
   * body, SignatureFormFieldSettings: Settings of the field (optional)
   * @return SignatureFormFieldResponse
	 */

   public function ModifySignatureFormField($userId, $formId, $documentId, $fieldId, $body=null) {
      if( $userId === null || $formId === null || $documentId === null || $fieldId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/forms/{formId}/documents/{documentId}/field/{fieldId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "PUT";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($formId !== null) {
  			$resourcePath = str_replace("{" . "formId" . "}",
  			                            $formId, $resourcePath);
  		}
  		if($documentId !== null) {
  			$resourcePath = str_replace("{" . "documentId" . "}",
  			                            $documentId, $resourcePath);
  		}
  		if($fieldId !== null) {
  			$resourcePath = str_replace("{" . "fieldId" . "}",
  			                            $fieldId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureFormFieldResponse');
  	  return $responseObject;
      }
  /**
	 * DeleteSignatureFormField
	 * Delete signature form field
   * userId, string: User GUID (required)
   * formId, string: Form GUID (required)
   * fieldId, string: Field GUID (required)
   * @return SignatureStatusResponse
	 */

   public function DeleteSignatureFormField($userId, $formId, $fieldId) {
      if( $userId === null || $formId === null || $fieldId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/forms/{formId}/fields/{fieldId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "DELETE";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($formId !== null) {
  			$resourcePath = str_replace("{" . "formId" . "}",
  			                            $formId, $resourcePath);
  		}
  		if($fieldId !== null) {
  			$resourcePath = str_replace("{" . "fieldId" . "}",
  			                            $fieldId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureStatusResponse');
  	  return $responseObject;
      }
  /**
	 * GetSignatureFormFields
	 * Get form fields for document in form per participant
   * userId, string: User GUID (required)
   * formId, string: Form GUID (required)
   * documentId, string: Document GUID (required)
   * @return SignatureFormFieldsResponse
	 */

   public function GetSignatureFormFields($userId, $formId, $documentId) {
      if( $userId === null || $formId === null || $documentId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/forms/{formId}/documents/{documentId}/fields");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($formId !== null) {
  			$resourcePath = str_replace("{" . "formId" . "}",
  			                            $formId, $resourcePath);
  		}
  		if($documentId !== null) {
  			$resourcePath = str_replace("{" . "documentId" . "}",
  			                            $documentId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureFormFieldsResponse');
  	  return $responseObject;
      }
  /**
	 * GetSignatureForm
	 * Get signature form
   * userId, string: User GUID (required)
   * formId, string: Form GUID (required)
   * @return SignatureFormResponse
	 */

   public function GetSignatureForm($userId, $formId) {
      if( $userId === null || $formId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/forms/{formId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($formId !== null) {
  			$resourcePath = str_replace("{" . "formId" . "}",
  			                            $formId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureFormResponse');
  	  return $responseObject;
      }
  /**
	 * ModifySignatureForm
	 * Modify signature form
   * userId, string: User GUID (required)
   * formId, string: Form GUID (required)
   * body, SignatureFormSettings: Settings of the form (optional)
   * @return SignatureFormResponse
	 */

   public function ModifySignatureForm($userId, $formId, $body=null) {
      if( $userId === null || $formId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/forms/{formId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "POST";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($formId !== null) {
  			$resourcePath = str_replace("{" . "formId" . "}",
  			                            $formId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureFormResponse');
  	  return $responseObject;
      }
  /**
	 * PublishSignatureForm
	 * Publish signature form
   * userId, string: User GUID (required)
   * formId, string: Form GUID (required)
   * @return SignatureStatusResponse
	 */

   public function PublishSignatureForm($userId, $formId) {
      if( $userId === null || $formId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/forms/{formId}/publish");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "PUT";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($formId !== null) {
  			$resourcePath = str_replace("{" . "formId" . "}",
  			                            $formId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureStatusResponse');
  	  return $responseObject;
      }
  /**
	 * RenameSignatureForm
	 * Rename signature form
   * userId, string: User GUID (required)
   * formId, string: Form GUID (required)
   * name, string: New form name (required)
   * @return SignatureFormResponse
	 */

   public function RenameSignatureForm($userId, $formId, $name) {
      if( $userId === null || $formId === null || $name === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/forms/{formId}?new_name={name}");
  	  $pos = strpos($resourcePath, "?");
	  if($pos !== false){
  	  	$resourcePath = substr($resourcePath, 0, $pos);
	  }
	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "PUT";
      $queryParams = array();
      $headerParams = array();

      if($name !== null) {
  		  $queryParams['new_name'] = $this->apiClient->toPathValue($name);
  		}
  		if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($formId !== null) {
  			$resourcePath = str_replace("{" . "formId" . "}",
  			                            $formId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureFormResponse');
  	  return $responseObject;
      }
  /**
	 * UpdateSignatureFormFromTemplate
	 * Add signature form fields from template
   * userId, string: User GUID (required)
   * formId, string: Form GUID (required)
   * templateId, string: Template GUID (required)
   * @return SignatureFormResponse
	 */

   public function UpdateSignatureFormFromTemplate($userId, $formId, $templateId) {
      if( $userId === null || $formId === null || $templateId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/forms/{formId}/templates/{templateId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "POST";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($formId !== null) {
  			$resourcePath = str_replace("{" . "formId" . "}",
  			                            $formId, $resourcePath);
  		}
  		if($templateId !== null) {
  			$resourcePath = str_replace("{" . "templateId" . "}",
  			                            $templateId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureFormResponse');
  	  return $responseObject;
      }
  /**
	 * GetSignatureForms
	 * Get signature forms
   * userId, string: User GUID (required)
   * statusId, string: Filter forms by statusId (optional)
   * page, int: Show records for page number (optional)
   * DateTime, string: Filter forms by date (optional)
   * name, string: Filter forms by name (optional)
   * records, int: Show records count (optional)
   * documentId, string: Filter forms by document GUID (optional)
   * @return SignatureFormsResponse
	 */

   public function GetSignatureForms($userId, $statusId=null, $page=null, $DateTime=null, $name=null, $records=null, $documentId=null) {
      if( $userId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/forms?statusId={statusId}&records={count}&page={page}&document={originalDocumentMD5}&date={date}&name={name}");
  	  $pos = strpos($resourcePath, "?");
	  if($pos !== false){
  	  	$resourcePath = substr($resourcePath, 0, $pos);
	  }
	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($statusId !== null) {
  		  $queryParams['statusId'] = $this->apiClient->toPathValue($statusId);
  		}
  		if($page !== null) {
  		  $queryParams['page'] = $this->apiClient->toPathValue($page);
  		}
  		if($DateTime !== null) {
  		  $queryParams['date'] = $this->apiClient->toPathValue($DateTime);
  		}
  		if($name !== null) {
  		  $queryParams['name'] = $this->apiClient->toPathValue($name);
  		}
  		if($records !== null) {
  		  $queryParams['records'] = $this->apiClient->toPathValue($records);
  		}
  		if($documentId !== null) {
  		  $queryParams['documentId'] = $this->apiClient->toPathValue($documentId);
  		}
  		if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureFormsResponse');
  	  return $responseObject;
      }
  /**
	 * GetSignatureFormResources
	 * Get form recources
   * userId, string: User GUID (required)
   * statusIds, string: Form status identifier - comma separated list (required)
   * @return SignatureFormResourcesResponse
	 */

   public function GetSignatureFormResources($userId, $statusIds) {
      if( $userId === null || $statusIds === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/forms/resources?statusIds={statusIds}");
  	  $pos = strpos($resourcePath, "?");
	  if($pos !== false){
  	  	$resourcePath = substr($resourcePath, 0, $pos);
	  }
	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($statusIds !== null) {
  		  $queryParams['statusIds'] = $this->apiClient->toPathValue($statusIds);
  		}
  		if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureFormResourcesResponse');
  	  return $responseObject;
      }
  /**
	 * GetSignedFormDocuments
	 * Get signed form documents
   * userId, string: User GUID (required)
   * formId, string: Form GUID (required)
   * @return stream
	 */

   public function GetSignedFormDocuments($userId, $formId, FileStream $outFileStream) {
      if( $userId === null || $formId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/forms/{formId}/documents/get");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($formId !== null) {
  			$resourcePath = str_replace("{" . "formId" . "}",
  			                            $formId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      return $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams, $outFileStream);
      }
  /**
	 * GetSignaturePredefinedLists
	 * Get user predefined lists
   * userId, string: User GUID (required)
   * @return SignaturePredefinedListsResponse
	 */

   public function GetSignaturePredefinedLists($userId) {
      if( $userId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/lists");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignaturePredefinedListsResponse');
  	  return $responseObject;
      }
  /**
	 * AddPredefinedList
	 * Add predefined list
   * userId, string: User GUID (required)
   * body, SignaturePredefinedListSettings: List data (required)
   * @return SignaturePredefinedListResponse
	 */

   public function AddPredefinedList($userId, $body) {
      if( $userId === null || $body === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/list");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "POST";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignaturePredefinedListResponse');
  	  return $responseObject;
      }
  /**
	 * DeletePredefinedList
	 * Delete predefined list
   * userId, string: User GUID (required)
   * listId, string: List GUID (required)
   * @return SignaturePredefinedListResponse
	 */

   public function DeletePredefinedList($userId, $listId) {
      if( $userId === null || $listId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/lists/{listId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "DELETE";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($listId !== null) {
  			$resourcePath = str_replace("{" . "listId" . "}",
  			                            $listId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignaturePredefinedListResponse');
  	  return $responseObject;
      }
  /**
	 * GetRolesList
	 * Get signature roles
   * userId, string: User GUID (required)
   * id, string: Filter roles by id (optional)
   * @return SignatureRolesResponse
	 */

   public function GetRolesList($userId, $id=null) {
      if( $userId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/roles?id={roleId}");
  	  $pos = strpos($resourcePath, "?");
	  if($pos !== false){
  	  	$resourcePath = substr($resourcePath, 0, $pos);
	  }
	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($id !== null) {
  		  $queryParams['id'] = $this->apiClient->toPathValue($id);
  		}
  		if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureRolesResponse');
  	  return $responseObject;
      }
  /**
	 * CreateSignature
	 * Create user signature
   * userId, string: User GUID (required)
   * name, string: Signature name (required)
   * body, SignatureSignatureSettings: Settings of the field (optional)
   * @return SignatureSignatureResponse
	 */

   public function CreateSignature($userId, $name, $body=null) {
      if( $userId === null || $name === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/signature?name={name}");
  	  $pos = strpos($resourcePath, "?");
	  if($pos !== false){
  	  	$resourcePath = substr($resourcePath, 0, $pos);
	  }
	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "POST";
      $queryParams = array();
      $headerParams = array();

      if($name !== null) {
  		  $queryParams['name'] = $this->apiClient->toPathValue($name);
  		}
  		if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureSignatureResponse');
  	  return $responseObject;
      }
  /**
	 * DeleteSignature
	 * Delete user signature
   * userId, string: User GUID (required)
   * signatureId, string: Signature GUID (required)
   * @return SignatureStatusResponse
	 */

   public function DeleteSignature($userId, $signatureId) {
      if( $userId === null || $signatureId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/signatures/{signatureId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "DELETE";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($signatureId !== null) {
  			$resourcePath = str_replace("{" . "signatureId" . "}",
  			                            $signatureId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureStatusResponse');
  	  return $responseObject;
      }
  /**
	 * GetSignatures
	 * Get user signatures
   * userId, string: User GUID (required)
   * page, int: Show records for page number (optional)
   * name, string: Filter by signature name (optional)
   * records, int: Show records count (optional)
   * @return SignatureSignaturesResponse
	 */

   public function GetSignatures($userId, $page=null, $name=null, $records=null) {
      if( $userId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/signatures?records={count}&page={page}&name={name}");
  	  $pos = strpos($resourcePath, "?");
	  if($pos !== false){
  	  	$resourcePath = substr($resourcePath, 0, $pos);
	  }
	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($page !== null) {
  		  $queryParams['page'] = $this->apiClient->toPathValue($page);
  		}
  		if($name !== null) {
  		  $queryParams['name'] = $this->apiClient->toPathValue($name);
  		}
  		if($records !== null) {
  		  $queryParams['records'] = $this->apiClient->toPathValue($records);
  		}
  		if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureSignaturesResponse');
  	  return $responseObject;
      }
  /**
	 * GetSignatureTemplates
	 * Get templates
   * userId, string: User GUID (required)
   * page, string: Page number (optional)
   * documentGuid, string: Fitler templates by document originalMD5 (optional)
   * recipientName, string: Filter templates by recipient nickname (optional)
   * name, string: Filter templates by signatureTemplate name (optional)
   * records, string: Records count (optional)
   * @return SignatureTemplatesResponse
	 */

   public function GetSignatureTemplates($userId, $page=null, $documentGuid=null, $recipientName=null, $name=null, $records=null) {
      if( $userId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/templates?records={count}&page={page}&documentGuid={documentGuid}&recipientName={recipientName}&name={name}");
  	  $pos = strpos($resourcePath, "?");
	  if($pos !== false){
  	  	$resourcePath = substr($resourcePath, 0, $pos);
	  }
	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($page !== null) {
  		  $queryParams['page'] = $this->apiClient->toPathValue($page);
  		}
  		if($documentGuid !== null) {
  		  $queryParams['documentGuid'] = $this->apiClient->toPathValue($documentGuid);
  		}
  		if($recipientName !== null) {
  		  $queryParams['recipientName'] = $this->apiClient->toPathValue($recipientName);
  		}
  		if($name !== null) {
  		  $queryParams['name'] = $this->apiClient->toPathValue($name);
  		}
  		if($records !== null) {
  		  $queryParams['records'] = $this->apiClient->toPathValue($records);
  		}
  		if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureTemplatesResponse');
  	  return $responseObject;
      }
  /**
	 * GetSignatureTemplate
	 * Get template
   * userId, string: User GUID (required)
   * templateId, string: Template GUID (required)
   * @return SignatureTemplateResponse
	 */

   public function GetSignatureTemplate($userId, $templateId) {
      if( $userId === null || $templateId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/templates/{templateId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($templateId !== null) {
  			$resourcePath = str_replace("{" . "templateId" . "}",
  			                            $templateId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureTemplateResponse');
  	  return $responseObject;
      }
  /**
	 * CreateSignatureTemplate
	 * Create template
   * userId, string: User GUID (required)
   * name, string: Template name (optional)
   * templateId, string: Template GUID of the template that will be used to create the new template (optional)
   * body, SignatureTemplateSettings: Settings of the template (optional)
   * envelopetId, string: Envelope GUID of the envelope that will be used to create the new template (required)
   * @return SignatureTemplateResponse
	 */

   public function CreateSignatureTemplate($userId, $name=null, $templateId=null, $body=null, $envelopetId) {
      if( $userId === null || $envelopetId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/template?name={name}&templateId={templateId}&envelopeId={envelopeId}");
  	  $pos = strpos($resourcePath, "?");
	  if($pos !== false){
  	  	$resourcePath = substr($resourcePath, 0, $pos);
	  }
	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "POST";
      $queryParams = array();
      $headerParams = array();

      if($name !== null) {
  		  $queryParams['name'] = $this->apiClient->toPathValue($name);
  		}
  		if($templateId !== null) {
  		  $queryParams['templateId'] = $this->apiClient->toPathValue($templateId);
  		}
  		if($envelopetId !== null) {
  		  $queryParams['envelopetId'] = $this->apiClient->toPathValue($envelopetId);
  		}
  		if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureTemplateResponse');
  	  return $responseObject;
      }
  /**
	 * ModifySignatureTemplate
	 * Modify template
   * userId, string: User GUID (required)
   * templateId, string: Template GUID (required)
   * body, SignatureTemplateSettings: Settings of the template (optional)
   * @return SignatureTemplateResponse
	 */

   public function ModifySignatureTemplate($userId, $templateId, $body=null) {
      if( $userId === null || $templateId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/templates/{templateId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "POST";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($templateId !== null) {
  			$resourcePath = str_replace("{" . "templateId" . "}",
  			                            $templateId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureTemplateResponse');
  	  return $responseObject;
      }
  /**
	 * RenameSignatureTemplate
	 * Rename template
   * userId, string: User GUID (required)
   * templateId, string: Template GUID (required)
   * name, string: New template name (required)
   * @return SignatureTemplateResponse
	 */

   public function RenameSignatureTemplate($userId, $templateId, $name) {
      if( $userId === null || $templateId === null || $name === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/templates/{templateId}?name={name}");
  	  $pos = strpos($resourcePath, "?");
	  if($pos !== false){
  	  	$resourcePath = substr($resourcePath, 0, $pos);
	  }
	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "PUT";
      $queryParams = array();
      $headerParams = array();

      if($name !== null) {
  		  $queryParams['name'] = $this->apiClient->toPathValue($name);
  		}
  		if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($templateId !== null) {
  			$resourcePath = str_replace("{" . "templateId" . "}",
  			                            $templateId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureTemplateResponse');
  	  return $responseObject;
      }
  /**
	 * DeleteSignatureTemplate
	 * Delete template
   * userId, string: User GUID (required)
   * templateId, string: Template GUID (required)
   * @return SignatureStatusResponse
	 */

   public function DeleteSignatureTemplate($userId, $templateId) {
      if( $userId === null || $templateId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/templates/{templateId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "DELETE";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($templateId !== null) {
  			$resourcePath = str_replace("{" . "templateId" . "}",
  			                            $templateId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureStatusResponse');
  	  return $responseObject;
      }
  /**
	 * AddSignatureTemplateRecipient
	 * Add recipient to the template
   * userId, string: User GUID (required)
   * templateId, string: Template GUID (required)
   * nickname, string: Nickname of the recipient (required)
   * roleId, string: Role GUID (required)
   * order, string: Display order of the recipient (optional)
   * @return SignatureTemplateResponse
	 */

   public function AddSignatureTemplateRecipient($userId, $templateId, $nickname, $roleId, $order=null) {
      if( $userId === null || $templateId === null || $nickname === null || $roleId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/templates/{templateId}/recipient?nickname={nickname}&role={roleId}&order={order}");
  	  $pos = strpos($resourcePath, "?");
	  if($pos !== false){
  	  	$resourcePath = substr($resourcePath, 0, $pos);
	  }
	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "POST";
      $queryParams = array();
      $headerParams = array();

      if($nickname !== null) {
  		  $queryParams['nickname'] = $this->apiClient->toPathValue($nickname);
  		}
  		if($roleId !== null) {
  		  $queryParams['role'] = $this->apiClient->toPathValue($roleId);
  		}
  		if($order !== null) {
  		  $queryParams['order'] = $this->apiClient->toPathValue($order);
  		}
  		if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($templateId !== null) {
  			$resourcePath = str_replace("{" . "templateId" . "}",
  			                            $templateId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureTemplateResponse');
  	  return $responseObject;
      }
  /**
	 * GetSignatureTemplateRecipients
	 * Get template recipients
   * userId, string: User GUID (required)
   * templateId, string: Template GUID (required)
   * @return SignatureTemplateRecipientsResponse
	 */

   public function GetSignatureTemplateRecipients($userId, $templateId) {
      if( $userId === null || $templateId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/templates/{templateId}/recipients");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($templateId !== null) {
  			$resourcePath = str_replace("{" . "templateId" . "}",
  			                            $templateId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureTemplateRecipientsResponse');
  	  return $responseObject;
      }
  /**
	 * DeleteSignatureTemplateRecipient
	 * Remove recipient from template
   * userId, string: User GUID (required)
   * templateId, string: Template GUID (required)
   * recipientId, string: Recipient GUID (required)
   * @return SignatureStatusResponse
	 */

   public function DeleteSignatureTemplateRecipient($userId, $templateId, $recipientId) {
      if( $userId === null || $templateId === null || $recipientId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/templates/{templateId}/recipients/{recipientId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "DELETE";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($templateId !== null) {
  			$resourcePath = str_replace("{" . "templateId" . "}",
  			                            $templateId, $resourcePath);
  		}
  		if($recipientId !== null) {
  			$resourcePath = str_replace("{" . "recipientId" . "}",
  			                            $recipientId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureStatusResponse');
  	  return $responseObject;
      }
  /**
	 * ModifySignatureTemplateRecipient
	 * Update template recipient
   * userId, string: User GUID (required)
   * templateId, string: Template GUID (required)
   * recipientId, string: Recipient GUID (required)
   * nickname, string: Nickname of the recipient (required)
   * roleId, string: Role GUID (required)
   * order, string: Display order of the recipient (optional)
   * @return SignatureTemplateResponse
	 */

   public function ModifySignatureTemplateRecipient($userId, $templateId, $recipientId, $nickname, $roleId, $order=null) {
      if( $userId === null || $templateId === null || $recipientId === null || $nickname === null || $roleId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/templates/{templateId}/recipient/{recipientId}?nickname={nickname}&role={roleId}&order={order}");
  	  $pos = strpos($resourcePath, "?");
	  if($pos !== false){
  	  	$resourcePath = substr($resourcePath, 0, $pos);
	  }
	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "PUT";
      $queryParams = array();
      $headerParams = array();

      if($nickname !== null) {
  		  $queryParams['nickname'] = $this->apiClient->toPathValue($nickname);
  		}
  		if($roleId !== null) {
  		  $queryParams['role'] = $this->apiClient->toPathValue($roleId);
  		}
  		if($order !== null) {
  		  $queryParams['order'] = $this->apiClient->toPathValue($order);
  		}
  		if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($templateId !== null) {
  			$resourcePath = str_replace("{" . "templateId" . "}",
  			                            $templateId, $resourcePath);
  		}
  		if($recipientId !== null) {
  			$resourcePath = str_replace("{" . "recipientId" . "}",
  			                            $recipientId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureTemplateResponse');
  	  return $responseObject;
      }
  /**
	 * AddSignatureTemplateDocument
	 * Add document to template
   * userId, string: User GUID (required)
   * templateId, string: Template GUID (required)
   * documentId, string: Document GUID (required)
   * order, string: Display order of the document (optional)
   * @return SignatureTemplateDocumentResponse
	 */

   public function AddSignatureTemplateDocument($userId, $templateId, $documentId, $order=null) {
      if( $userId === null || $templateId === null || $documentId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/templates/{templateId}/document/{documentId}?order={order}");
  	  $pos = strpos($resourcePath, "?");
	  if($pos !== false){
  	  	$resourcePath = substr($resourcePath, 0, $pos);
	  }
	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "POST";
      $queryParams = array();
      $headerParams = array();

      if($order !== null) {
  		  $queryParams['order'] = $this->apiClient->toPathValue($order);
  		}
  		if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($templateId !== null) {
  			$resourcePath = str_replace("{" . "templateId" . "}",
  			                            $templateId, $resourcePath);
  		}
  		if($documentId !== null) {
  			$resourcePath = str_replace("{" . "documentId" . "}",
  			                            $documentId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureTemplateDocumentResponse');
  	  return $responseObject;
      }
  /**
	 * GetSignatureTemplateDocuments
	 * Get documents in template
   * userId, string: User GUID (required)
   * templateId, string: Template GUID (required)
   * @return SignatureTemplateDocumentsResponse
	 */

   public function GetSignatureTemplateDocuments($userId, $templateId) {
      if( $userId === null || $templateId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/templates/{templateId}/documents");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($templateId !== null) {
  			$resourcePath = str_replace("{" . "templateId" . "}",
  			                            $templateId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureTemplateDocumentsResponse');
  	  return $responseObject;
      }
  /**
	 * DeleteSignatureTemplateDocument
	 * Remove document from template
   * userId, string: User GUID (required)
   * templateId, string: Template GUID (required)
   * documentId, string: Document GUID (required)
   * @return SignatureStatusResponse
	 */

   public function DeleteSignatureTemplateDocument($userId, $templateId, $documentId) {
      if( $userId === null || $templateId === null || $documentId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/templates/{templateId}/documents/{documentId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "DELETE";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($templateId !== null) {
  			$resourcePath = str_replace("{" . "templateId" . "}",
  			                            $templateId, $resourcePath);
  		}
  		if($documentId !== null) {
  			$resourcePath = str_replace("{" . "documentId" . "}",
  			                            $documentId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureStatusResponse');
  	  return $responseObject;
      }
  /**
	 * AddSignatureTemplateField
	 * Add signature template field
   * userId, string: User GUID (required)
   * templateId, string: Template GUID (required)
   * documentId, string: Document GUID (required)
   * recipientId, string: Recipient GUID (required)
   * fieldId, string: Field GUID (required)
   * body, SignatureTemplateFieldSettings: Settings of the field (optional)
   * @return SignatureTemplateFieldResponse
	 */

   public function AddSignatureTemplateField($userId, $templateId, $documentId, $recipientId, $fieldId, $body=null) {
      if( $userId === null || $templateId === null || $documentId === null || $recipientId === null || $fieldId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/templates/{templateId}/documents/{documentId}/recipient/{recipientId}/field/{fieldId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "POST";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($templateId !== null) {
  			$resourcePath = str_replace("{" . "templateId" . "}",
  			                            $templateId, $resourcePath);
  		}
  		if($documentId !== null) {
  			$resourcePath = str_replace("{" . "documentId" . "}",
  			                            $documentId, $resourcePath);
  		}
  		if($recipientId !== null) {
  			$resourcePath = str_replace("{" . "recipientId" . "}",
  			                            $recipientId, $resourcePath);
  		}
  		if($fieldId !== null) {
  			$resourcePath = str_replace("{" . "fieldId" . "}",
  			                            $fieldId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureTemplateFieldResponse');
  	  return $responseObject;
      }
  /**
	 * AssignSignatureTemplateField
	 * Assign signature template field
   * userId, string: User GUID (required)
   * templateId, string: Template GUID (required)
   * documentId, string: Document GUID (required)
   * fieldId, string: Field GUID (required)
   * body, SignatureTemplateAssignFieldSettings: Settings of the field (optional)
   * @return SignatureTemplateFieldResponse
	 */

   public function AssignSignatureTemplateField($userId, $templateId, $documentId, $fieldId, $body=null) {
      if( $userId === null || $templateId === null || $documentId === null || $fieldId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/templates/{templateId}/documents/{documentId}/field/{fieldId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "POST";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($templateId !== null) {
  			$resourcePath = str_replace("{" . "templateId" . "}",
  			                            $templateId, $resourcePath);
  		}
  		if($documentId !== null) {
  			$resourcePath = str_replace("{" . "documentId" . "}",
  			                            $documentId, $resourcePath);
  		}
  		if($fieldId !== null) {
  			$resourcePath = str_replace("{" . "fieldId" . "}",
  			                            $fieldId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureTemplateFieldResponse');
  	  return $responseObject;
      }
  /**
	 * ModifySignatureTemplateField
	 * Modify signature template field
   * userId, string: User GUID (required)
   * templateId, string: Template GUID (required)
   * documentId, string: Document GUID (required)
   * fieldId, string: Field GUID (required)
   * body, SignatureTemplateFieldSettings: Settings of the field (optional)
   * @return SignatureTemplateFieldResponse
	 */

   public function ModifySignatureTemplateField($userId, $templateId, $documentId, $fieldId, $body=null) {
      if( $userId === null || $templateId === null || $documentId === null || $fieldId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/templates/{templateId}/documents/{documentId}/field/{fieldId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "PUT";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($templateId !== null) {
  			$resourcePath = str_replace("{" . "templateId" . "}",
  			                            $templateId, $resourcePath);
  		}
  		if($documentId !== null) {
  			$resourcePath = str_replace("{" . "documentId" . "}",
  			                            $documentId, $resourcePath);
  		}
  		if($fieldId !== null) {
  			$resourcePath = str_replace("{" . "fieldId" . "}",
  			                            $fieldId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureTemplateFieldResponse');
  	  return $responseObject;
      }
  /**
	 * DeleteSignatureTemplateFieldLocation
	 * Delete signature template field location
   * userId, string: User GUID (required)
   * templateId, string: Template GUID (required)
   * fieldId, string: Field GUID (required)
   * locationId, string: Field location GUID (required)
   * @return SignatureStatusResponse
	 */

   public function DeleteSignatureTemplateFieldLocation($userId, $templateId, $fieldId, $locationId) {
      if( $userId === null || $templateId === null || $fieldId === null || $locationId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/templates/{templateId}/fields/{fieldId}/locations/{locationId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "DELETE";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($templateId !== null) {
  			$resourcePath = str_replace("{" . "templateId" . "}",
  			                            $templateId, $resourcePath);
  		}
  		if($fieldId !== null) {
  			$resourcePath = str_replace("{" . "fieldId" . "}",
  			                            $fieldId, $resourcePath);
  		}
  		if($locationId !== null) {
  			$resourcePath = str_replace("{" . "locationId" . "}",
  			                            $locationId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureStatusResponse');
  	  return $responseObject;
      }
  /**
	 * ModifySignatureTemplateFieldLocation
	 * Modify signature template field location
   * userId, string: User GUID (required)
   * templateId, string: Template GUID (required)
   * documentId, string: Document GUID (required)
   * recipientId, string: Recipient GUID (required)
   * fieldId, string: Field GUID (required)
   * locationId, string: Field location GUID (required)
   * body, SignatureTemplateFieldLocationSettings: Settings of the field location (optional)
   * @return SignatureTemplateFieldResponse
	 */

   public function ModifySignatureTemplateFieldLocation($userId, $templateId, $documentId, $recipientId, $fieldId, $locationId, $body=null) {
      if( $userId === null || $templateId === null || $documentId === null || $recipientId === null || $fieldId === null || $locationId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/templates/{templateId}/documents/{documentId}/recipient/{recipientId}/fields/{fieldId}/locations/{locationId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "PUT";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($templateId !== null) {
  			$resourcePath = str_replace("{" . "templateId" . "}",
  			                            $templateId, $resourcePath);
  		}
  		if($documentId !== null) {
  			$resourcePath = str_replace("{" . "documentId" . "}",
  			                            $documentId, $resourcePath);
  		}
  		if($recipientId !== null) {
  			$resourcePath = str_replace("{" . "recipientId" . "}",
  			                            $recipientId, $resourcePath);
  		}
  		if($fieldId !== null) {
  			$resourcePath = str_replace("{" . "fieldId" . "}",
  			                            $fieldId, $resourcePath);
  		}
  		if($locationId !== null) {
  			$resourcePath = str_replace("{" . "locationId" . "}",
  			                            $locationId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureTemplateFieldResponse');
  	  return $responseObject;
      }
  /**
	 * GetSignatureTemplateFields
	 * Get template fields
   * userId, string: User GUID (required)
   * templateId, string: Template GUID (required)
   * documentId, string: Document GUID (required)
   * recipientId, string: Recipient GUID (required)
   * @return SignatureTemplateFieldsResponse
	 */

   public function GetSignatureTemplateFields($userId, $templateId, $documentId, $recipientId) {
      if( $userId === null || $templateId === null || $documentId === null || $recipientId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/templates/{templateId}/fields?document={documentId}&recipient={recipientId}");
  	  $pos = strpos($resourcePath, "?");
	  if($pos !== false){
  	  	$resourcePath = substr($resourcePath, 0, $pos);
	  }
	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($documentId !== null) {
  		  $queryParams['document'] = $this->apiClient->toPathValue($documentId);
  		}
  		if($recipientId !== null) {
  		  $queryParams['recipient'] = $this->apiClient->toPathValue($recipientId);
  		}
  		if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($templateId !== null) {
  			$resourcePath = str_replace("{" . "templateId" . "}",
  			                            $templateId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureTemplateFieldsResponse');
  	  return $responseObject;
      }
  /**
	 * DeleteSignatureTemplateField
	 * Delete signature template field
   * userId, string: User GUID (required)
   * templateId, string: Template GUID (required)
   * fieldId, string: Field GUID (required)
   * @return SignatureTemplateResponse
	 */

   public function DeleteSignatureTemplateField($userId, $templateId, $fieldId) {
      if( $userId === null || $templateId === null || $fieldId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/templates/{templateId}/fields/{fieldId}");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "DELETE";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		if($templateId !== null) {
  			$resourcePath = str_replace("{" . "templateId" . "}",
  			                            $templateId, $resourcePath);
  		}
  		if($fieldId !== null) {
  			$resourcePath = str_replace("{" . "fieldId" . "}",
  			                            $fieldId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureTemplateResponse');
  	  return $responseObject;
      }
  /**
	 * GetSignatureTemplateResources
	 * Get template recources
   * userId, string: User GUID (required)
   * @return SignatureTemplateResourcesResponse
	 */

   public function GetSignatureTemplateResources($userId) {
      if( $userId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/templates/resources");
  	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureTemplateResourcesResponse');
  	  return $responseObject;
      }
  /**
	 * GetFieldsList
	 * Get signature fields
   * userId, string: User GUID (required)
   * fieldId, string: Filter fields by id (optional)
   * @return SignatureFieldsResponse
	 */

   public function GetFieldsList($userId, $fieldId=null) {
      if( $userId === null ) {
        throw new ApiException("missing required parameters", 400);
      }
      //parse inputs
  	  $resourcePath = str_replace("*", "", "/signature/{userId}/fields?id={fieldId}");
  	  $pos = strpos($resourcePath, "?");
	  if($pos !== false){
  	  	$resourcePath = substr($resourcePath, 0, $pos);
	  }
	  $resourcePath = str_replace("{format}", "json", $resourcePath);
  	  $method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($fieldId !== null) {
  		  $queryParams['id'] = $this->apiClient->toPathValue($fieldId);
  		}
  		if($userId !== null) {
  			$resourcePath = str_replace("{" . "userId" . "}",
  			                            $userId, $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
      $response = $this->apiClient->callAPI($this->basePath, $resourcePath, $method,
  		                                      $queryParams, $body, $headerParams);
      if(! $response){
        return null;
      }

  	  $responseObject = $this->apiClient->deserialize($response,
  		                                                'SignatureFieldsResponse');
  	  return $responseObject;
      }
  
}

